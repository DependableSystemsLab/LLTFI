/**
 * instruction.def is a copy of Instruction.def in llvm.
 * If there is any change in the opcode of Instructions.def, please update
 * this file accordingly
 */


// Terminator Instructions - These instructions are used to terminate a basic
// block of the program.   Every basic block must end with one of these
// instructions for it to be a well formed basic block.
HANDLE_INST ( 1, Ret          , ReturnInst,        1)
HANDLE_INST ( 2, Br           , BranchInst,        1)
HANDLE_INST ( 3, Switch       , SwitchInst,        1)
HANDLE_INST ( 4, IndirectBr   , IndirectBrInst,    1)
HANDLE_INST ( 5, Invoke       , InvokeInst,        1)
HANDLE_INST ( 6, Resume       , ResumeInst,        1)
HANDLE_INST ( 7, Unreachable  , UnreachableInst,   1)
HANDLE_INST ( 8, CleanupRet   , CleanupReturnInst, 1)
HANDLE_INST ( 9, CatchRet     , CatchReturnInst,   1)
HANDLE_INST ( 10, CatchSwitch , CatchSwitchInst,   1)
HANDLE_INST ( 11, CallBr      , CallBr,            1)

// Standard unary operators...
HANDLE_INST( 12, FNeg         , UnaryOperator,     1)

// Standard binary operators...
HANDLE_INST (13, Add  , BinaryOperator,       1)
HANDLE_INST (14, FAdd , BinaryOperator,       1)
HANDLE_INST (15, Sub  , BinaryOperator,       1)
HANDLE_INST (16, FSub , BinaryOperator,       1)
HANDLE_INST (17, Mul  , BinaryOperator,       1)
HANDLE_INST (18, FMul , BinaryOperator,       1)
HANDLE_INST (19, UDiv , BinaryOperator,       1)
HANDLE_INST (20, SDiv , BinaryOperator,       1)
HANDLE_INST (21, FDiv , BinaryOperator,       1)
HANDLE_INST (22, URem , BinaryOperator,       1)
HANDLE_INST (23, SRem , BinaryOperator,       1)
HANDLE_INST (24, FRem , BinaryOperator,       1)

// Logical operators (integer operands)
HANDLE_INST (25, Shl  , BinaryOperator,       1) // Shift left  (logical)
HANDLE_INST (26, LShr , BinaryOperator,       1) // Shift right (logical)
HANDLE_INST (27, AShr , BinaryOperator,       1) // Shift right (arithmetic)
HANDLE_INST (28, And  , BinaryOperator,       1)
HANDLE_INST (29, Or   , BinaryOperator,       1)
HANDLE_INST (30, Xor  , BinaryOperator,       1)

// Memory operators...
HANDLE_INST (31, Alloca, AllocaInst,          1)  // Stack management
HANDLE_INST (32, Load  , LoadInst,            1)  // Memory manipulation instrs
HANDLE_INST (33, Store , StoreInst,           1)
HANDLE_INST (34, GetElementPtr, GetElementPtrInst, 1)
HANDLE_INST (35, Fence , FenceInst,           1)
HANDLE_INST (36, AtomicCmpXchg , AtomicCmpXchgInst, 1)
HANDLE_INST (37, AtomicRMW , AtomicRMWInst,   1)

// Cast operators ...
// NOTE: The order matters here because CastInst::isEliminableCastPair 
// NOTE: (see Instructions.cpp) encodes a table based on this ordering.
HANDLE_INST (38, Trunc   , TruncInst   ,        1)  // Truncate integers
HANDLE_INST (39, ZExt    , ZExtInst    ,        1)  // Zero extend integers
HANDLE_INST (40, SExt    , SExtInst    ,        1)  // Sign extend integers
HANDLE_INST (41, FPToUI  , FPToUIInst  ,        1)  // floating point -> UInt
HANDLE_INST (42, FPToSI  , FPToSIInst  ,        1)  // floating point -> SInt
HANDLE_INST (43, UIToFP  , UIToFPInst  ,        1)  // UInt -> floating point
HANDLE_INST (44, SIToFP  , SIToFPInst  ,        1)  // SInt -> floating point
HANDLE_INST (45, FPTrunc , FPTruncInst ,        1)  // Truncate floating point
HANDLE_INST (46, FPExt   , FPExtInst   ,        1)  // Extend floating point
HANDLE_INST (47, PtrToInt, PtrToIntInst,        1)  // Pointer -> Integer
HANDLE_INST (48, IntToPtr, IntToPtrInst,        1)  // Integer -> Pointer
HANDLE_INST (49, BitCast , BitCastInst ,        1)  // Type cast
HANDLE_INST (50, AddrSpaceCast, AddrSpaceCastInst, 1)  // addrspace cast

// Funcletpad operators
HANDLE_INST (51, CleanupPad , CleanupPadInst,   1)
HANDLE_INST (52, CatchPad   , CatchPadInst  ,   1)

// Other operators...
HANDLE_INST (53, ICmp   , ICmpInst   ,         1)  // Integer comparison instruction
HANDLE_INST (54, FCmp   , FCmpInst   ,         1)  // Floating point comparison instr.
HANDLE_INST (55, PHI    , PHINode    ,         1)  // PHI node instruction
HANDLE_INST (56, Call   , CallInst   ,         1)  // Call a function
HANDLE_INST (57, Select , SelectInst ,         1)  // select instruction
HANDLE_INST (58, UserOp1, Instruction,         1)  // May be used internally in a pass
HANDLE_INST (59, UserOp2, Instruction,         1)  // Internal to passes only
HANDLE_INST (60, VAArg  , VAArgInst,           1)  // vaarg instruction
HANDLE_INST (61, ExtractElement, ExtractElementInst,   1)// extract from vector
HANDLE_INST (62, InsertElement, InsertElementInst,     1)  // insert into vector
HANDLE_INST (63, ShuffleVector, ShuffleVectorInst,     1)  // shuffle two vectors.
HANDLE_INST (64, ExtractValue, ExtractValueInst,       1)// extract from aggregate
HANDLE_INST (65, InsertValue, InsertValueInst,         1)  // insert into aggregate
HANDLE_INST (66, LandingPad, LandingPadInst,           1)  // Landing pad instruction.
HANDLE_INST (67, Freeze, FreezeInst,                   1)  // Freeze instruction.

#ifdef HANDLE_INST
#undef HANDLE_INST
#endif
